

README
CS40 Project 3 - locality

Authors: Lawer Nyako (lnyako01) & Rigoberto Rodriguez-Anton (rrodri08)

Acknowledgements:
- The many different TAs that have helped us (thank you so much).
- Lectures and slides from Mark Sheldon and Noah Mendelsohn
- Hanson quick reference C Interfaces and Implementations by David R. Hanson
- Hannah Fiarman for helping Lawer with the Uarray2 implementation used 
  throughout this project
- ChatGPT was a helpful resource when writing the bash script we used for 
making
  our timing files. 

Implementation Completeness:
UArray2b, a2plain, and ppmtrans complete for all of our tested cases.

Architecture:
UArray2b
- Done using a uarray2 of uarrays where every uarray is a block
- in our mapping function we used the mapping function from a uarray2. To pass
  in multiple values for the closure (such as the orignal closure, the apply 
  function, and a pointer to the array2b) of we used a struct

a2plain
- is a subclass of the virtual class A2Methods
    - allows us to have polymorphism and encapsulation

ppmtrans
- using the virtual class A2Methods allowed us polymorphism with the 
  implementation
- we used a similar struct design as we did in our UArray2b to send multiple 
  values in as our closures for mapping functions. Notably we wanted to pass in
  the new 2d array representing the ppm as part of the closure in order to 
  handle mapping.



Each cell in the table is in the format: 
[total time (ns)] - [time per pixel (ns) = estimated instructions per pixel]

With the simplifying assumption that our computers execute 1,000,000,000 
instructions per second (1 instruction per nanosecond), we can say that the
time per pixel is roughly equal to the number of instructions per pixel for 
that transformation.



segfault.jpg - 80735 bytes
+-----------------+---------------+---------------+---------------+
|                 | row-major     | col-major     | block-major   |
+-----------------+---------------+---------------+---------------+
| rotate 0        | 1000 - 0      | 1323 - 0      | 1543 - 0      |
+-----------------+---------------+---------------+---------------+
| rotate 90       | 48809889 - 59 | 54653708 - 67 | 63734549 - 78 |
+-----------------+---------------+---------------+---------------+
| rotate 270      | 48079632 - 59 | 56421043 - 69 | 69017507 - 84 |
+-----------------+---------------+---------------+---------------+
| rotate 180      | 48186390 - 59 | 61121119 - 74 | 68451087 - 83 |
+-----------------+---------------+---------------+---------------+
| flip horizontal | 44531423 - 54 | 55443007 - 67 | 65693194 - 80 |
+-----------------+---------------+---------------+---------------+
| flip vertical   | 42662098 - 52 | 55136758 - 67 | 62465117 - 76 |
+-----------------+---------------+---------------+---------------+
| transpose       | 44151997 - 54 | 47503734 - 58 | 59315141 - 72 |
+-----------------+---------------+---------------+---------------+


desert.jpg - 155174 bytes
+-----------------+---------------+---------------+---------------+
|                 | row-major     | col-major     | block-major   |
+-----------------+---------------+---------------+---------------+
| rotate 0        | 1612 - 0      | 1545 - 0      | 1355 - 0      |
+-----------------+---------------+---------------+---------------+
| rotate 90       | 25543428 - 68 | 25018251 - 67 | 32351203 - 87 |
+-----------------+---------------+---------------+---------------+
| rotate 270      | 23548483 - 63 | 25847113 - 69 | 31805738 - 85 |
+-----------------+---------------+---------------+---------------+
| rotate 180      | 22591042 - 60 | 28078406 - 75 | 34405594 - 92 |
+-----------------+---------------+---------------+---------------+
| flip horizontal | 21121106 - 57 | 26955411 - 72 | 32030728 - 86 |
+-----------------+---------------+---------------+---------------+
| flip vertical   | 20661467 - 55 | 25987141 - 70 | 31405771 - 84 |
+-----------------+---------------+---------------+---------------+
| transpose       | 19821317 - 53 | 31806326 - 85 | 28920163 - 77 |
+-----------------+---------------+---------------+---------------+


mobo.jpg - 6778640 bytes
+-----------------+-----------------+------------------+-----------------+
|                 | row-major       | col-major        | block-major     |
+-----------------+-----------------+------------------+-----------------+
| rotate 0        | 1402 - 0        | 1288 - 0         | 1824 - 0        |
+-----------------+-----------------+------------------+-----------------+
| rotate 90       | 3203498629 - 64 | 5494754335 - 110 | 3913977677 - 78 |
+-----------------+-----------------+------------------+-----------------+
| rotate 270      | 3404534818 - 68 | 5757936828 - 115 | 4007029028 - 80 |
+-----------------+-----------------+------------------+-----------------+
| rotate 180      | 3036368112 - 61 | 4961845212 - 99  | 4075442343 - 82 |
+-----------------+-----------------+------------------+-----------------+
| flip horizontal | 2773370845 - 56 | 4243016857 - 85  | 3988801932 - 80 |
+-----------------+-----------------+------------------+-----------------+
| flip vertical   | 2659832000 - 53 | 4538725710 - 91  | 3752592242 - 75 |
+-----------------+-----------------+------------------+-----------------+
| transpose       | 3271540924 - 66 | 3649164470 - 73  | 3468075495 - 69 |
+-----------------+-----------------+------------------+-----------------+

ANALYSIS OF TIMING RESULTS:

        Initial observation of our results reveals that row-major mapping is 
quicker per pixel than any of the other methods. Barring a single outlier in
desert.jpg, row-major mapping had lower time per pixel for every type of 
transformation. This is contrary to our initial expectations that block-major
mapping would have advantages in 90/270 degree rotations. It is likely that our
implementation of UArray2b is significantly slower compared to our simpler 
UArray2 data types, leading to skewed results in favor of row-major and 
col-major mapping methods. 
        Our final ranking is that row-major is the best in all cases, 
block-major is the second best when used on large files that can't fit a row in
the cache. Col-major is the second best when used on images of small and medium
sizes. And Col-major is the worst in large files by far.


Done on lawer's hailigan computer server

CPU and Clock Rate: Intel(R) Xeon(R) Silver 4214Y CPU @ 2.20GHz

Hours Spent:
21